df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- rpart(training$Class~.,training)
testing0 <- testing[testing$PerimStatusCh1 == 2 &
isTRUE(all.equal(testing$FiberWidthCh1, 10)), ]
testing1 <- testing[ isTRUE( all.equal(testing$FiberWidthCh1 , 10) ), ]
testing2 <- testing[ isTRUE( all.equal(testing$FiberWidthCh1 , 8 ,tolerence = .4) ), ]
testing3 <- testing[ isTRUE(all.equal(testing$FiberWidthCh1 , 8 )) &
testing$PerimStatusCh1 == 2 , ]
pred0 <- predict(md,newdata = testing0)
pred0
pred1 <- predict(md,newdata = testing1)
pred1
pred2 <- predict(md,newdata = testing2)
pred2
pred3 <- predict(md,newdata = testing3)
pred3
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#dim(segmentationOriginal)
df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- rpart(training$Class~.,training)
testing0 <- testing[testing$PerimStatusCh1 == 2 &
isTRUE(all.equal(testing$FiberWidthCh1, 10 ,tolerance = .4)), ]
testing1 <- testing[ isTRUE( all.equal(testing$FiberWidthCh1 , 10 ,tolerance = .4) ), ]
testing2 <- testing[ isTRUE( all.equal(testing$FiberWidthCh1 , 8 ,tolerance = .4) ), ]
testing3 <- testing[ isTRUE(all.equal(testing$FiberWidthCh1 , 8 ,tolerance = .4)) &
testing$PerimStatusCh1 == 2 , ]
pred0 <- predict(md,newdata = testing0)
pred0
pred1 <- predict(md,newdata = testing1)
pred1
pred2 <- predict(md,newdata = testing2)
pred2
pred3 <- predict(md,newdata = testing3)
pred3
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
?round
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#dim(segmentationOriginal)
df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- train(training[,-2],training$Class, method="rpart")
testing0 <- testing[testing$PerimStatusCh1 == 2 &
round(testing$FiberWidthCh1,0) == 10 , -2]
View(testing0)
testing1 <- testing[ round(testing$FiberWidthCh1,0) == 10  , -2 ]
View(testing1)
testing2 <- testing[ round(testing$FiberWidthCh1,0) == 8  ,-2 ]
View(testing2)
testing3 <- testing[ testing$PerimStatusCh1 == 2 &
round(testing$FiberWidthCh1,0 ) == 8  ,-2]
View(testing3)
pred0 <- predict(md,newdata = testing0)
pred0
pred1 <- predict(md,newdata = testing1)
pred1
pred2 <- predict(md,newdata = testing2)
pred2
pred3 <- predict(md,newdata = testing3)
pred3
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#dim(segmentationOriginal)
df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- train(training[,-2],training$Class, method="rpart")
testing0 <- testing[testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0) == 10 , -2]
View(testing$PerimStatusCh1)
testing1 <- testing[ round(testing$FiberWidthCh1,0) == 10  , -2 ]
View(testing1)
testing2 <- testing[ round(testing$FiberWidthCh1,0) == 8  ,-2 ]
View(testing2)
testing3 <- testing[ testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0 ) == 8  ,-2]
View(testing3)
pred0 <- predict(md,newdata = testing0)
pred0
pred1 <- predict(md,newdata = testing1)
pred1
pred2 <- predict(md,newdata = testing2)
pred2
pred3 <- predict(md,newdata = testing3)
pred3
library(help="party")
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#dim(segmentationOriginal)
df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- train(training[,-2],training$Class, method="rpart")
fancyRpartPlot(md$finalModel)
testing0 <- testing[testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0) == 10 , -2]
View(testing$PerimStatusCh1)
testing1 <- testing[ round(testing$FiberWidthCh1,0) == 10  , -2 ]
View(testing1)
testing2 <- testing[ round(testing$FiberWidthCh1,0) == 8  ,-2 ]
View(testing2)
testing3 <- testing[ testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0 ) == 8  ,-2]
View(testing3)
pred0 <- predict(md,newdata = testing0)
pred0
pred1 <- predict(md,newdata = testing1)
pred1
pred2 <- predict(md,newdata = testing2)
pred2
pred3 <- predict(md,newdata = testing3)
pred3
library("e1071", lib.loc="~/R/win-library/3.1")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#dim(segmentationOriginal)
df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- train(training[,-2],training$Class, method="rpart")
fancyRpartPlot(md$finalModel)
testing0 <- testing[testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0) == 10 , -2]
View(testing$PerimStatusCh1)
testing1 <- testing[ round(testing$FiberWidthCh1,0) == 10  , -2 ]
View(testing1)
testing2 <- testing[ round(testing$FiberWidthCh1,0) == 8  ,-2 ]
View(testing2)
testing3 <- testing[ testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0 ) == 8  ,-2]
View(testing3)
pred0 <- predict(md,newdata = testing0)
pred0
pred1 <- predict(md,newdata = testing1)
pred1
pred2 <- predict(md,newdata = testing2)
pred2
pred3 <- predict(md,newdata = testing3)
pred3
?fancyRpartPlot
??fancyRpartPlot
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#dim(segmentationOriginal)
df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- train(training[,-2],training$Class, method="rpart")
library("rattle")
fancyRpartPlot(md$finalModel)
testing0 <- testing[testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0) == 10 , -2]
View(testing$PerimStatusCh1)
testing1 <- testing[ round(testing$FiberWidthCh1,0) == 10  , -2 ]
View(testing1)
testing2 <- testing[ round(testing$FiberWidthCh1,0) == 8  ,-2 ]
View(testing2)
testing3 <- testing[ testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0 ) == 8  ,-2]
View(testing3)
pred0 <- predict(md,newdata = testing0)
pred1 <- predict(md,newdata = testing1)
pred2 <- predict(md,newdata = testing2)
pred3 <- predict(md,newdata = testing3)
install.packages("rpart.plot")
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
library("pgmm")
data(olive)
olive = olive[,-1]
md <- train(Area~. , data=olive,method="rpart")
md <- rpart(Area~. , data=olive)
fancyRpartPlot(md)
predOlive <- predict(md,newdata)
?predict.rpart
predOlive <- predict(md,newdata=newdata)
newdt = as.data.frame(t(colMeans(olive)))
predOlive <- predict(md,newdata=newdt)
predOlive
data(olive)
olive = olive[,-1]
md <- rpart(Area~. , data=olive)
fancyRpartPlot(md)
newdt = as.data.frame(t(colMeans(olive)))
predOlive <- predict(md,newdata=newdt)
predOlive
View(olive$Area)
library("ElemStatLearn")
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
md <- train( chd~tobacco+ldl+typea+obesity+alcohol+age, method="glm", family="binomial")
md <- train( chd~tobacco+ldl+typea+obesity+alcohol+age, data = trainSA,
method="glm", family="binomial")
md <- train( chd~tobacco+ldl+typea+obesity+alcohol+age, data = trainSA,
method="glm", family="binomial")
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(md, trainSA[,-11])
predictTest <- predict(md, testSA[,-11])
library("ElemStatLearn")
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
md <- train( chd~tobacco+ldl+typea+obesity+alcohol+age, data = trainSA,
method="glm", family="binomial")
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(md, trainSA[,-11])
predictTest <- predict(md, testSA[,-11])
missclassTrain <- missClass(trainSA[,11],predictTrain)
missclassTrain
missclassTest <- missClass(testSA[,11],predictTest)
missclassTest
predictTrain <- predict(md, trainSA[,-11])
predictTest <- predict(md, testSA[,-11])
missclassTrain <- missClass(trainSA[,chd],predictTrain)
missclassTrain
missclassTest <- missClass(testSA[,chd],predictTest)
missclassTest
source('~/Coursera/DataScience/PracticalMachineLearning/Quiz3.R')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#dim(segmentationOriginal)
df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- train(training[,-2],training$Class, method="rpart")
library("rattle")
fancyRpartPlot(md$finalModel)
testing0 <- testing[testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0) == 10 , -2]
testing1 <- testing[ round(testing$FiberWidthCh1,0) == 10  , -2 ]
testing2 <- testing[ round(testing$FiberWidthCh1,0) == 8  ,-2 ]
testing3 <- testing[ testing$PerimStatusCh1 == 1 &
round(testing$FiberWidthCh1,0 ) == 8  ,-2]
pred0 <- predict(md,newdata = testing0)
pred1 <- predict(md,newdata = testing1)
pred2 <- predict(md,newdata = testing2)
pred3 <- predict(md,newdata = testing3)
# question 3
library("pgmm")
data(olive)
olive = olive[,-1]
md <- rpart(Area~. , data=olive)
fancyRpartPlot(md)
newdt = as.data.frame(t(colMeans(olive)))
predOlive <- predict(md,newdata=newdt)
predOlive
# question 4
library("ElemStatLearn")
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
md <- train( chd~tobacco+ldl+typea+obesity+alcohol+age, data = trainSA,
method="glm", family="binomial")
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(md, trainSA[,-10])
predictTest <- predict(md, testSA[,-10])
missclassTrain <- missClass(trainSA[,10],predictTrain)
missclassTrain
missclassTest <- missClass(testSA[,10],predictTest)
missclassTest
y <- factor(levels=("train","test"))
y <- factor(levels=c("train","test"))
vowel.train
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
y <- factor(levels=c("train","test"))
vowel.train
vowel.test
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
md <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
library(Caret)
md <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
library(caret)
md <- train(y~.,data=vowel.train,method="rf",prox=TRUE)
?varImp
varImp(md)
setwd("~/Coursera/DataScience/PracticalMachineLearning/ActivityReport")
source('~/.active-rstudio-document')
---
library(Hmisc)
dtrain <- csv.get("pml-training.csv")
dm <- dim(dtrain)
nas <- sum(is.na(dtrain))
nas.vars <- sapply (dtrain,function(x) sum(is.na(x)) )
fulldtrain <- dtrain[complete.cases(dtrain),]
d <-dim(fulldtrain)
cls <- class(fulldtrain$classe)
lbls <- levels(fulldtrain$classe)
library(Hmisc)
dtest <- csv.get("pml-testing.csv")
tdm <- dim(dtest)
tnas <- sum(is.na(dtest))
tnas.vars <- sapply (dtest,function(x) sum(is.na(x)) )
fulldtest <- dtest[complete.cases(dtest),]
td <-dim(fulldtest)
idxs <- which(tnas.vars == 0)
fullVardtrain <- dtrain[,idxs]
dimfVtrain <- dim(fullVardtrain)
dfV <- dim(fullVardtrain[complete.cases(fullVardtrain),])
idxstrain <- which(nas.vars == 0)
matchingFD <- which(idxs == idxstrain)
library(caret)
tc <- trainControl("cv",10)
glmd3 <- train(x = fulldtrain[,-160], y = fulldtrain$classe, data = fulldtrain,
method = "gbm")#,trControl = tc)
glmd4 <- train(x = fullVardtrain[,-60], y = fullVardtrain$classe, data = fullVardtrain,
method = "gbm")#,trControl = tc)
---
library(Hmisc)
dtrain <- csv.get("pml-training.csv")
dm <- dim(dtrain)
nas <- sum(is.na(dtrain))
nas.vars <- sapply (dtrain,function(x) sum(is.na(x)) )
fulldtrain <- dtrain[complete.cases(dtrain),]
d <-dim(fulldtrain)
cls <- class(fulldtrain$classe)
lbls <- levels(fulldtrain$classe)
library(Hmisc)
dtest <- csv.get("pml-testing.csv")
tdm <- dim(dtest)
tnas <- sum(is.na(dtest))
tnas.vars <- sapply (dtest,function(x) sum(is.na(x)) )
fulldtest <- dtest[complete.cases(dtest),]
td <-dim(fulldtest)
idxs <- which(tnas.vars == 0)
fullVardtrain <- dtrain[,idxs]
dimfVtrain <- dim(fullVardtrain)
dfV <- dim(fullVardtrain[complete.cases(fullVardtrain),])
idxstrain <- which(nas.vars == 0)
matchingFD <- which(idxs == idxstrain)
library(caret)
tc <- trainControl("cv",10)
glmd3 <- train(x = fulldtrain[,-160], y = fulldtrain$classe,
method = "gbm")#,trControl = tc)
---
library("Hmisc")
dtrain <- csv.get("pml-training.csv")
dm <- dim(dtrain)
nas <- sum(is.na(dtrain))
nas.vars <- sapply (dtrain,function(x) sum(is.na(x)) )
fulldtrain <- dtrain[complete.cases(dtrain),]
d <-dim(fulldtrain)
cls <- class(fulldtrain$classe)
lbls <- levels(fulldtrain$classe)
dtest <- csv.get("pml-testing.csv")
tdm <- dim(dtest)
tnas <- sum(is.na(dtest))
tnas.vars <- sapply (dtest,function(x) sum(is.na(x)) )
fulldtest <- dtest[complete.cases(dtest),]
td <-dim(fulldtest)
idxs <- which(tnas.vars == 0)
fullVardtrain <- dtrain[,idxs]
dimfVtrain <- dim(fullVardtrain)
dfV <- dim(fullVardtrain[complete.cases(fullVardtrain),])
idxstrain <- which(nas.vars == 0)
matchingFD <- which(idxs == idxstrain)
library(caret)
tc <- trainControl("cv",10)
glmd3 <- train(x = fulldtrain[,-160], y = fulldtrain$classe,
method = "gbm",verbose=FALSE) #,trControl = tc)
warnings()
library("Hmisc")
dtrain <- csv.get("pml-training.csv")
dm <- dim(dtrain)
nas <- sum(is.na(dtrain))
nas.vars <- sapply (dtrain,function(x) sum(is.na(x)) )
fulldtrain <- dtrain[complete.cases(dtrain),]
d <-dim(fulldtrain)
cls <- class(fulldtrain$classe)
lbls <- levels(fulldtrain$classe)
dtest <- csv.get("pml-testing.csv")
tdm <- dim(dtest)
tnas <- sum(is.na(dtest))
tnas.vars <- sapply (dtest,function(x) sum(is.na(x)) )
fulldtest <- dtest[complete.cases(dtest),]
td <-dim(fulldtest)
idxs <- which(tnas.vars == 0)
fullVardtrain <- dtrain[,idxs]
dimfVtrain <- dim(fullVardtrain)
dfV <- dim(fullVardtrain[complete.cases(fullVardtrain),])
idxstrain <- which(nas.vars == 0)
matchingFD <- which(idxs == idxstrain)
library(caret)
tc <- trainControl("cv",10)
glmd3 <- train(x = fulldtrain[,-160], y = fulldtrain$classe,
method = "gbm",verbose=FALSE) #,trControl = tc)
glmd4 <- train(x = fullVardtrain[,-60], y = fullVardtrain$classe,
method = "gbm",verbose=FALSE) #,trControl = tc)
idxstrain <- which(nas.vars == 0)
matchingFD <- which(idxs == idxstrain)
library(caret)
tc <- trainControl("cv",10)
glmd3 <- train(x = fulldtrain[,-160], y = fulldtrain$classe,
method = "gbm",verbose=FALSE) #,trControl = tc)
idxstrain <- which(nas.vars == 0)
matchingFD <- which(idxs == idxstrain)
library(caret)
tc <- trainControl("cv",10)
glmd3 <- train(x = fulldtrain[,-160], y = fulldtrain$classe,
method = "gbm",verbose=FALSE ,trControl = tc)
idxstrain <- which(nas.vars == 0)
matchingFD <- which(idxs == idxstrain)
library(caret)
tc <- trainControl("cv",10)
glmd3 <- train(x = fulldtrain[,-160], y = fulldtrain$classe,
method = "gbm",verbose=FALSE ,trControl = tc)
source('~/.active-rstudio-document')
source('~/Coursera/DataScience/PracticalMachineLearning/ActivityReport/prj.r')
warnings()
matchingFD <- which(idxs %in% idxstrain)
idxstrain <- which(nas.vars == 0)
matchingFD <- which(idxs %in% idxstrain)
library(caret)
source('~/Coursera/DataScience/PracticalMachineLearning/ActivityReport/prj.r')
warnings()
gbmd1 <- train(x = fulldtrain[,-160], y = fulldtrain$classe,
method = "gbm",verbose=FALSE ,trControl = tc)
warnings()
View(olive)
rm(test1,testSA,testing,testing0,testing1,testing2,testing3,olive,newdt)
rm(SAheart,adData,concrete,trainSA,training,trainpc)
rm(vowel.testing,vowel.training)
rm(vowel.test,vowel.train)
rm(train1)
rm(testpc)
rm(mixtures)
rm(segmentationOriginal)
rm(df)
rm(md,md1,md2)
rm(p1,p2,p3,p4,p5,p6,p7,p8,p9)
?trainControl
?gbm.pred
??gbm.pred
View(fulldtest)
dtest <- csv.get("pml-testing.csv")
tdm <- dim(dtest)
tnas <- sum(is.na(dtest))
tnas.vars <- sapply (dtest,function(x) sum(is.na(x)) )
fulldtest <- dtest[complete.cases(dtest),]
td <-dim(fulldtest)
